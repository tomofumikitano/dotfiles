set number
set encoding=utf-8

set nobackup
set nowritebackup

set ignorecase

set updatetime=500
set signcolumn=yes

set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set smartindent

let data_dir = '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
	silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

" Plug 'psf/black', { 'branch': 'stable' }
" Plug 'robbles/logstash.vim'

Plug 'junegunn/vim-plug'

" Plug 'sheerun/vim-polyglot'

Plug 'luochen1990/rainbow'
let g:rainbow_active=1

Plug 'honza/vim-snippets'
" let g:UltiSnipsExpandTrigger="<s-tab>"
" let g:UltiSnipsEditSplit="horizontal"

inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() :
                                           \"\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

Plug 'preservim/nerdtree'
nnoremap <C-t> :NERDTreeToggle<CR>

Plug 'tomtom/tcomment_vim'

Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Use <c-space> to trigger completion
" if has('nvim')
"   inoremap <silent><expr> <c-space> coc#refresh()
" else
"   inoremap <silent><expr> <c-@> coc#refresh()
" endif
inoremap <silent><expr> <C-@> coc#refresh()

" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

autocmd CursorHold * silent call CocActionAsync('highlight')

nmap <leader>r <Plug>(coc-rename)

let g:coc_global_extensions=[ 'coc-powershell', 'coc-pyright' ]

" Plug 'JayDoubleu/vim-pwsh-formatter'

call plug#end()

" Make <tab> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
"
" inoremap <silent><expr> <tab> coc#pum#visible() ? coc#pum#confirm()
" 			\: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

inoremap <expr><Tab> coc#pum#visible() ? coc#_select_confirm() : "\<Tab>"

noremap <F9> :!clear && chmod +x % && ./%<CR>

autocmd FileType python setlocal tabstop=2 shiftwidth=2 softtabstop=2 
" autocmd FileType ps1 noremap <C-l> :PWSHFORMAT<CR>

set runtimepath+=$HOME/vim_night_shift
colorscheme night_shift 
" hi MatchParen term=underline cterm=underline gui=underline
" hi Visual term=reverse cterm=reverse guibg=Grey

imap <S-Tab> <Plug>(coc-snippets-expand)

" Use <c-space> to trigger completion
" if has('nvim')
"   inoremap <silent><expr> <c-space> coc#refresh()
" else
"   inoremap <silent><expr> <c-@> coc#refresh()
" endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
" nmap <silent><nowait> [g <Plug>(coc-diagnostic-prev)
" nmap <silent><nowait> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent><nowait> gd <Plug>(coc-definition)
nmap <silent><nowait> gt <Plug>(coc-type-definition)
nmap <silent><nowait> gi <Plug>(coc-implementation)
nmap <silent><nowait> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction


" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" function! FormatAndOrganizeImport()
"   call CocActionAsync('format')
"   call CocActionAsync('runCommand', 'editor.action.organizeImport')
" endfunction

nnoremap <silent> <C-l> :call CocActionAsync('format')<CR>
nnoremap <silent> <C-l><C-l> :call CocActionAsync('runCommand', 'editor.action.organizeImport')<CR>

nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
